import { err, ok, Result } from 'neverthrow';

const nouns = [ // https://en.wikipedia.org/wiki/List_of_animal_names
    'Alligators',
    'Alpacas',
    'Apes',
    'Ants',
    'Bears',
    'Birds',
    'Beavers',
    'Bees',
    'Buffalos',
    'Bisons',
    'Butterflies',
    'Cats',
    'Capybaras',
    'Camels',
    'Caterpillars',
    'Cheetahs',
    'Chickens',
    'Chinchillas',
    'Cobras',
    'Crows',
    'Cougars',
    'Dogs',
    'Donkeys',
    'Dinos',
    'Dolphins',
    'Eagles',
    'Elephants',
    'Eels',
    'Elks',
    'Emus',
    'Foxes',
    'Ferrets',
    'Flamingos',
    'Frogs',
    'Falcons',
    'Gazelles',
    'Geckos',
    'Giraffes',
    'Goats',
    'Gorillas',
    'Grasshopper',
    'Gnus',
    'Goldfish',
    'Hamsters',
    'Hawks',
    'Hedgehogs',
    'Horses',
    'Humans',
    'Hummingbirds',
    'Hyenas',
    'Iguanas',
    'Impalas',
    'Jaguars',
    'Jellyfish',
    'Jackals',
    'Kangaroos',
    'Koalas',
    'Kookaburras',
    'Lemurs',
    'Leopards',
    'Lions',
    'Lizards',
    'Llamas',
    'Lobsters',
    'Mammoths',
    'Manatees',
    'Marmots',
    'Meerkats',
    'Moles',
    'Mongooses',
    'Monkeys',
    'Mosquitos',
    'Mice',
    'Nightingales',
    'Opossums',
    'Oceloty',
    'Orangutans',
    'Otters',
    'Owls',
    'Oysters',
    'Panthers',
    'Parrots',
    'Pandas',
    'Penguins',
    'Pigs',
    'Pigeons',
    'Ponies',
    'Pugs',
    'Rabbits',
    'Raccoons',
    'Rats',
    'Ravens',
    'Rhinos',
    'Reindeer',
    'Seahorses',
    'Seals',
    'Sharks',
    'Sheep',
    'Skunks',
    'Sloths',
    'Snails',
    'Snakes',
    'Spiders',
    'Squids',
    'Squirrels',
    'Swans',
    'Tamarins',
    'Tapirs',
    'Tigers',
    'Toads',
    'Turtles',
    'Walruses',
    'Wasps',
    'Weasels',
    'Whales',
    'Wolfs',
    'Wolverines',
    'Wombats',
    'Woodpeckers',
    'Worms',
    'Zebras',
];

const attr = [ // http://www.goodverbs.com/english/a/3
    'Absorbing',
    'Abusing',
    'Accusing',
    'Addicted',
    'Admiring',
    'Adoring',
    'Begging',
    'Believing',
    'Besieging',
    'Betraying',
    'Billing',
    'Blaming',
    'Blinking',
    'Blooming',
    'Calibrating',
    'Camping',
    'Capsizing',
    'Capitulating',
    'Caring',
    'Cashing',
    'Challenging',
    'Combating',
    'Damaging',
    'Dazzling',
    'Decaying',
    'Degrading',
    'Denying',
    'Deserving',
    'Easing',
    'Eating',
    'Educating',
    'Elaborating',
    'Electing',
    'Embarrassing',
    'Fainting',
    'Falling',
    'Fancying',
    'Favouring',
    'Fearing',
    'Feasting',
    'Fertilizing',
    'Fighting',
    'Flinching',
    'Flourishing',
    'Gambling',
    'Gazing',
    'Generalizing',
    'Generating',
    'Gibbering',
    'Giggling',
    'Glancing',
    'Glaring',
    'Glowing',
    'Grasping',
    'Granting',
    'Grieving',
    'Hacking',
    'Hammering',
    'Hanging',
    'Harassing',
    'Harvesting',
    'Hatching',
    'Hating',
    'Hauling',
    'Haunting',
    'Hazarding',
    'Heating',
    'Hedging',
    'Idealizing',
    'Impertinent',
    'Jamming',
    'Joking',
    'Justifying',
    'Jumping',
    'Killing',
    'Kissing',
    'Kneeling',
    'Kniting',
    'Knowing',
    'Knocking',
    'Lagging',
    'Lamenting',
    'Languishing',
    'Laughing',
    'Leading',
    'Learning',
    'Lecturing',
    'Legalizing',
    'Liberating',
    'Licking',
    'Lifting',
    'Lingering',
    'Longing',
    'Lubricating',
    'Lunching',
    'Lynching',
    'Magnetizing',
    'Maintaining',
    'Maligning',
    'Maltreating',
    'Managing',
    'Manicuring',
    'Manufacturing',
    'Marrying',
    'Marvelling',
    'Matching',
    'Maturing',
    'Misbehaving',
    'Mistaking',
    'Moaning',
    'Molesting',
    'Mortifying',
    'Murdering',
    'Muttering',
    'Narrating',
    'Negotiating',
    'Nursing',
    'Observing',
    'Obsessing',
    'Offending',
    'Oppressing',
    'Outwitting',
    'Overlooking',
    'Obstructing',
    'Objecting',
    'Opposing',
    'Oscillating',
    'Panicking',
    'Panting',
    'Parading',
    'Parking',
    'Paroling',
    'Participating',
    'Performing',
    'Perishing',
    'Perpetrating',
    'Persecuting',
    'Petrifying',
    'Plagiarizing',
    'Planning',
    'Pleasing',
    'Plotting',
    'Polluting',
    'Racing',
    'Raging',
    'Ranting',
    'Rapping',
    'Ratifying',
    'Reacting',
    'Rebelling',
    'Reciting',
    'Recruiting',
    'Refuelling',
    'Regretting',
    'Relaxing',
    'Sacrificing',
    'Sailing',
    'Satisfying',
    'Screaming',
    'Searching',
    'Seducing',
    'Sewing',
    'Sewing',
    'Shopping',
    'Shouting',
    'Smacking',
    'Smiling',
    'Snatching',
    'Sneaking',
    'Sniffing',
    'Snoring',
    'Stalking',
    'Surprising',
    'Tackling',
    'Tackling',
    'Teasing',
    'Tempting',
    'Tempering',
    'Thieving',
    'Tidying',
    'Trailing',
    'Trembling',
    'Troubling',
    'Waiting',
    'Waving',
    'Washing',
    'Weakening',
    'Weeping',
    'Welcoming',
    'Welcoming',
    'Wheezeing',
    'Whimpering',
    'Whining',
    'Winning',
    'Winking',
    'Working',
    'Worshipping',
    'Wounding',
    'Wounding',
    'Writing',
    'Zigzagging',
    'Zooming',
]

const maxIterations = 100;

function generateName() {
    const nounIndex = Math.floor(Math.random() * nouns.length);
    const fittingAttr = attr.filter((a) => a[0] === nouns[nounIndex][0])
    const fittingAttrIndex = Math.floor(Math.random() * fittingAttr.length);
    return `${fittingAttr[fittingAttrIndex]} ${nouns[nounIndex]}`
}

export type getDifferentNameError = 'NEW_NAME_COULD_NOT_BE_FOUND'
export function getDifferentName(names: string[]): Result<string, getDifferentNameError> {
    let name: string = generateName()
    for (let i = 0; i < maxIterations; i++) {
        if (!names.includes(name)) { return ok(name) }
        name = generateName()
    }
    return err('NEW_NAME_COULD_NOT_BE_FOUND')
}

export function isASweetName(name: string) {
    const name_splitted = name.split(' ')
    if (name_splitted.length !== 2) { return false }
    if (!attr.includes(name_splitted[0])) { return false }
    if (!nouns.includes(name_splitted[1])) { return false }
    return true
}
